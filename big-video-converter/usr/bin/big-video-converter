#!/usr/bin/env bash

# Version: 3.0.0

# If ffmpeg_executable is not set, use ffmpeg
if [[ -z $ffmpeg_executable ]]; then
    # If have jellyfin-ffmpeg installed, use it
    if [[ -e /usr/lib/jellyfin-ffmpeg/ffmpeg ]]; then
        ffmpeg_executable="/usr/lib/jellyfin-ffmpeg/ffmpeg"
    else
        ffmpeg_executable="ffmpeg"
    fi
fi

# If show_executable is set, show the ffmpeg executable path
if [[ $show_executable == 1 ]]; then
    echo "$ffmpeg_executable"
    exit 0
fi

# If vainfo is available, check for VAAPI encoders before ffmpeg to faster result
if ! command -v vainfo > /dev/null; then
	echo "Command vainfo not found"
	exit 1
fi

# If vainfo is available, check for VAAPI encoders before ffmpeg to faster result
if ! command -v lspci > /dev/null; then
	echo "Command lspci not found"
	exit 1
fi

# If detect_encoders is set, test and show encoders
if [[ $detect_encoders == 1 ]]; then
    # Using function as workround for not have problem in terminal session on ffmpeg crash
    function detect_encoders_now() {
        devices=$(lspci)
        if grep -qiE '(VGA|3d).*nvidia' <<<"$devices"; then
            if lsmod 2>/dev/null | grep -q nvidia_drm; then
                search_encoder="nvidia|vulkan"
            else
                search_encoder="vaapi|vulkan"
            fi
        elif grep -qiE 'VGA.*(\bAMD\b|\bATI\b)' <<<"$devices"; then
            search_encoder="amd|vaapi|vulkan"
        elif grep -qi 'VGA.*intel' <<<"$devices"; then
            search_encoder="intel|vaapi|vulkan"
        else
            encoder_format=$encoder_software
        fi

        available_encoders=$(ffmpeg -encoders 2>/dev/null | grep -iE "$search_encoder" | grep -vE 'mj?peg|vp8' | awk '{print $2}')
        vaapi_encoders=$(vainfo 2>/dev/null | grep -i "VAEntrypointEncSlice\|VAEntrypointEncSliceLP" | awk -F: '{print $1}')
        
        # Map VA-API codec names to ffmpeg encoder names
        for vaapi_verify in $vaapi_encoders; do
            case "$vaapi_verify" in
                "VAProfileH264"*) available_vaapi_encoders+=" h264_vaapi";;
                "VAProfileHEVC"*) available_vaapi_encoders+=" hevc_vaapi";;
                "VAProfileVP9"*)  available_vaapi_encoders+=" vp9_vaapi";;
                "VAProfileAV1"*)  available_vaapi_encoders+=" av1_vaapi";;
            esac
        done

        for encoder in $available_encoders; do
            if [[ $encoder =~ .*vaapi && $available_vaapi_encoders =~ .*$encoder.* ]]; then
                for device in /dev/dri/renderD*; do
                    if ffmpeg -vaapi_device $device -f lavfi -i nullsrc=s=1280x720:d=1 -vf 'format=nv12,hwupload' -c:v $encoder -frames:v 1 -f null - 2>/dev/null; then
                        echo "$encoder"
                    fi
                done
            elif [[ $encoder =~ .*vulkan ]]; then
                    if ffmpeg -nostdin -xerror -init_hw_device vulkan=vk -f lavfi -i nullsrc=s=1280x720:d=1 -filter_hw_device vk -vf "format=nv12,hwupload=derive_device=vulkan" -c:v h264_vulkan -frames:v 1 -f null - 2>/dev/null; then
                        echo "$encoder"
                    fi
            elif [[ $encoder =~ .*nvidia|.*amf ]]; then
                if ffmpeg -nostdin -xerror -f lavfi -i nullsrc=s=1280x720:d=1 -c:v $encoder -frames:v 1 -f null - 2>/dev/null; then
                    echo "$encoder"
                fi
            fi
        done
        exit 0
    }
    detect_encoders_now 2> /dev/null

fi


# Define color variables
COLOR_RESET="\e[0m"
COLOR_GREEN="\e[32m"
COLOR_YELLOW="\e[33m"
COLOR_CYAN="\e[36m"
COLOR_BLUE="\e[34m"

# Show help if no arguments are passed or the first argument is -h or --help
if [[ $# -eq 0 || $1 == "-h" || $1 == "--help" ]]; then
    echo -e "${COLOR_CYAN}Usage:${COLOR_RESET} ${COLOR_YELLOW}variables=value${COLOR_RESET} $0 ${COLOR_YELLOW}input_file${COLOR_RESET}"
    echo ""
    echo -e "${COLOR_CYAN}You can specify various variables before the command. Below are the available options and examples:${COLOR_RESET}"
    echo ""
    echo -e "${COLOR_BLUE}1. Specifying the GPU:${COLOR_RESET}"
    echo -e "   ${COLOR_CYAN}You can specify which GPU to use for the operation. Options include:${COLOR_GREEN} auto, nvidia, amd, intel, software${COLOR_RESET}"
    echo -e "   ${COLOR_CYAN}Example:${COLOR_RESET} ${COLOR_YELLOW}gpu=nvidia${COLOR_RESET} $0 ${COLOR_YELLOW}video.mkv${COLOR_RESET}"
    echo ""
    echo -e "${COLOR_BLUE}2. Specifying the Output File:${COLOR_RESET}"
    echo -e "   ${COLOR_CYAN}You can specify the name of the output file. If this variable is not specified, a default name will be used.${COLOR_RESET}"
    echo -e "   ${COLOR_CYAN}Example:${COLOR_RESET} ${COLOR_YELLOW}output_file=video_converted.mp4${COLOR_RESET} $0 ${COLOR_YELLOW}video.mkv${COLOR_RESET}"
    echo ""
    echo -e "${COLOR_BLUE}3. Specifying the Output Folder:${COLOR_RESET}"
    echo -e "   ${COLOR_CYAN}You can specify the folder where the output file will be saved. This will save the file with the same name as the input file in the specified folder.${COLOR_RESET}"
    echo -e "   ${COLOR_CYAN}If ${COLOR_YELLOW}output_file${COLOR_CYAN} is specified, this variable is ignored.${COLOR_RESET}"
    echo -e "   ${COLOR_CYAN}Example:${COLOR_RESET} ${COLOR_YELLOW}output_folder=/home/user/Videos${COLOR_RESET} $0 ${COLOR_YELLOW}video.mkv${COLOR_RESET}"
    echo ""
    echo -e "${COLOR_BLUE}4. Specifying Video Quality:${COLOR_RESET}"
    echo -e "   ${COLOR_CYAN}You can specify the quality of the video. Options include:${COLOR_GREEN} veryhigh, high, medium, low, verylow${COLOR_RESET}"
    echo -e "   ${COLOR_CYAN}Example:${COLOR_RESET} ${COLOR_YELLOW}video_quality=high${COLOR_RESET} $0 ${COLOR_YELLOW}video.mkv${COLOR_RESET}"
    echo ""
    echo -e "${COLOR_BLUE}5. Specifying Audio Bitrate:${COLOR_RESET}"
    echo -e "   ${COLOR_CYAN}You can specify the bitrate of the audio. Example:${COLOR_GREEN} 128k, 192k, 256k${COLOR_RESET}"
    echo -e "   ${COLOR_CYAN}Default is 32k per channel, stereo audio will have 64k bitrate, and 5.1 audio will have 192k bitrate${COLOR_RESET}"
    echo -e "   ${COLOR_CYAN}Example:${COLOR_RESET} ${COLOR_YELLOW}audio_bitrate=192k${COLOR_RESET} $0 ${COLOR_YELLOW}video.mkv${COLOR_RESET}"
    echo ""
    echo -e "${COLOR_BLUE}6. Specifying Audio Channels:${COLOR_RESET}"
    echo -e "   ${COLOR_CYAN}You can specify the number of audio channels. If not specified, the default will be used.${COLOR_RESET}"
    echo -e "   ${COLOR_CYAN}Example:${COLOR_RESET} ${COLOR_YELLOW}audio_channels=2${COLOR_RESET} $0 ${COLOR_YELLOW}video.mkv${COLOR_RESET}"
    echo ""
    echo -e "${COLOR_BLUE}7. Video Filter:${COLOR_RESET}"
    echo -e "   ${COLOR_CYAN}You can specify the video filter for ffmpeg. Example:${COLOR_GREEN} -vf scale=1280x720${COLOR_RESET}"
    echo ""
    echo -e "${COLOR_BLUE}8. Specifying Compression Preset:${COLOR_RESET}"
    echo -e "   ${COLOR_CYAN}You can specify the preset for compression.:${COLOR_GREEN} ultrafast, veryfast, faster, medium, slow, veryslow${COLOR_RESET}"
    echo -e "   ${COLOR_CYAN}Default is medium for GPU encode and faster for software encode${COLOR_RESET}"
    echo -e "   ${COLOR_CYAN}Example:${COLOR_RESET} ${COLOR_YELLOW}preset=veryslow${COLOR_RESET} $0 ${COLOR_YELLOW}video.mkv${COLOR_RESET}"
    echo ""
    echo -e "${COLOR_BLUE}9. Passing Additional Options to FFmpeg:${COLOR_RESET}"
    echo -e "   ${COLOR_CYAN}You can pass additional options directly to FFmpeg using the ${COLOR_YELLOW}options${COLOR_CYAN} variable.${COLOR_RESET}"
    echo -e "   ${COLOR_CYAN}Example to cut a video from 1 minute to 30 seconds:${COLOR_RESET}"
    echo -e "   ${COLOR_YELLOW}options=\"-ss 60 -t 30\"${COLOR_RESET} $0 ${COLOR_YELLOW}video.mkv${COLOR_RESET}"
    echo ""
    echo -e "${COLOR_BLUE}10. Specifying Subtitle Handling:${COLOR_RESET}"
    echo -e "   ${COLOR_CYAN}You can specify how to handle subtitles. Options include:${COLOR_GREEN} extract, embedded, none${COLOR_RESET} Default is extract"
    echo -e "   ${COLOR_CYAN}Example to extract subtitles:${COLOR_RESET} ${COLOR_YELLOW}subtitle_extract=extract${COLOR_RESET} $0 ${COLOR_YELLOW}video.mkv${COLOR_RESET}"
    echo ""
    echo -e "${COLOR_BLUE}11. Specifying Audio Handling:${COLOR_RESET}"
    echo -e "   ${COLOR_CYAN}You can specify how to handle audio. Options include:${COLOR_GREEN} copy, reencode, none${COLOR_RESET} Default is copy"
    echo -e "   ${COLOR_CYAN}Example to copy audio without reencoding:${COLOR_RESET} ${COLOR_YELLOW}audio_handling=copy${COLOR_RESET} $0 ${COLOR_YELLOW}video.mkv${COLOR_RESET}"
    echo ""
    echo -e "${COLOR_BLUE}12. Specifying Video Encoder:${COLOR_RESET}"
    echo -e "   ${COLOR_CYAN}You can specify the video encoder. Options include:${COLOR_GREEN} h264, h265, av1, vp9${COLOR_RESET} Default is h264"
    echo -e "   ${COLOR_CYAN}Example to use h265 encoder:${COLOR_RESET} ${COLOR_YELLOW}video_encoder=h265${COLOR_RESET} $0 ${COLOR_YELLOW}video.mkv${COLOR_RESET}"
    echo ""
    echo -e "${COLOR_BLUE}13. Force Gpu partial mode, decode using CPU and encode using GPU:${COLOR_RESET}"
    echo -e "   ${COLOR_YELLOW}gpu_partial=1${COLOR_RESET}"
    echo ""
    echo -e "${COLOR_BLUE}14. Force CPU decode and encode:${COLOR_RESET}"
    echo -e "   ${COLOR_YELLOW}force_software=1${COLOR_RESET}"
    echo ""
    echo -e "${COLOR_BLUE}15. Copy video without reencode:${COLOR_RESET}"
    echo -e "   ${COLOR_YELLOW}force_copy_video=1${COLOR_RESET}"
    echo ""
    echo -e "${COLOR_BLUE}15. Only extract subtitles to .srt files:${COLOR_RESET}"
    echo -e "   ${COLOR_YELLOW}only_extract_subtitles=1${COLOR_RESET}"
    echo ""
    echo -e "${COLOR_BLUE}16. Show ffmpeg executable path:${COLOR_RESET}"
    echo -e "   ${COLOR_YELLOW}show_executable=1${COLOR_RESET}"
    echo ""
    echo -e "${COLOR_BLUE}17. Detect and show available encoders:${COLOR_RESET}"
    echo -e "   ${COLOR_YELLOW}detect_encoders=1${COLOR_RESET}"
    echo ""
    echo -e "${COLOR_BLUE}18. Force ffmpeg encoder. Options: nvenc, vulkan, vaapi, qsv, amf, software ${COLOR_RESET}"
    echo -e "   ${COLOR_YELLOW}force_encoder=encoder_name${COLOR_RESET}"
    echo ""
    echo -e "${COLOR_BLUE}19. Force ffmpeg decoder. Options: cuda, vaapi, qsv, amf, software ${COLOR_RESET}"
    echo -e "   ${COLOR_YELLOW}force_decoder=decoder_name${COLOR_RESET}"
    exit 0
fi

# Use the first argument as the input file
input_file="$1"

# Detect bit depth and codec of input video
echo "Analyzing input video..."
pix_fmt=$(ffprobe -v error -select_streams v:0 -show_entries stream=pix_fmt -of csv=p=0 "$1" 2>/dev/null)
video_profile=$(ffprobe -v error -select_streams v:0 -show_entries stream=profile -of csv=p=0 "$1" 2>/dev/null)
input_codec=$(ffprobe -v error -select_streams v:0 -show_entries stream=codec_name -of csv=p=0 "$1" 2>/dev/null)

# Determine if video is 10-bit based on pixel format and profile
is_10bit=false
if [[ $pix_fmt =~ yuv.*p10 || $pix_fmt =~ yuv.*10le || $pix_fmt =~ .*10bit.* ]]; then
    is_10bit=true
    echo "Detected 10-bit video input (pixel format: $pix_fmt)"
elif [[ $video_profile =~ .*10.* || $video_profile =~ .*High\ 10.* || $video_profile =~ .*Main\ 10.* ]]; then
    is_10bit=true
    echo "Detected 10-bit video input (profile: $video_profile)"
else
    echo "Detected 8-bit video input"
fi

# Determine if we need to convert 10-bit video to 8-bit for H.264 compatibility
needs_10bit_to_8bit_conversion=false
if [[ $is_10bit == true && ($video_encoder == "h264" || -z "$video_encoder") ]]; then
    needs_10bit_to_8bit_conversion=true
    echo "Detected 10-bit input. Forcing 8-bit pixel format (nv12) for H.264 compatibility."
fi

# Remove extension from the input file
input_file_without_extension=${input_file##*/}
input_file_without_extension=${input_file_without_extension%.*}

# Check if the output_folder variable exists and variable output_file not exists
if [[ -n $output_folder && -z $output_file ]]; then
    output_file="$output_folder/$input_file_without_extension"
fi

# If variable output_file is not set, use same folder as input file
: ${output_file:="$input_file_without_extension"}

# Info about the input file
ffprobe_result=$(ffprobe -select_streams s -show_entries stream=index:stream_tags=language,title:stream_disposition=forced -of csv=p=0 "$input_file" 2>&1)

# Filter only subtitles in srt format
subtitle_list_srt=$(grep 'Subtitle: subrip (srt)' <<<"$ffprobe_result")

subtitle_list_srt_ids=$(sed -E 's|.*Stream #0:([0-9]+).*|\1|g' <<<"$subtitle_list_srt")

# Filter simplified 
subtitle_list_simplified=$(grep '^[0-9],' <<<"$ffprobe_result")

# Convert to an array
mapfile -t subtitles <<<"$subtitle_list_simplified"

# If not specified, use extract
: ${subtitle_extract:=extract}

# Subtitle handling
if [[ $subtitle_extract == "embedded" ]]; then
    subtitle_cmd="-map 0:s? -c:s mov_text"
elif [[ $subtitle_extract == "extract" ]]; then
    if [[ -n $subtitle_list_srt ]]; then
        # Declare an associative array to track language code usage
        declare -A language_code_usage

        # Loop through the array
        for i in "${subtitles[@]}"; do

            IFS=',' read -r index disposition language_code title <<< "$i"

            # Only process the subtitle if it is in the list of srt subtitles
            if [[ $subtitle_list_srt_ids =~ $index ]]; then
            
                # Remove white spaces and special characters from the language code
                language_code=${language_code// /}
                # Remove quotes, parentheses and other problematic characters
                language_code=${language_code//\"/}
                language_code=${language_code//\'/}
                language_code=${language_code//\(/}
                language_code=${language_code//\)/}
                language_code=${language_code//\[/}
                language_code=${language_code//\]/}
                
                # Verify if the language code is valid
                if [[ -z $language_code || $language_code == "0" ]]; then
                    language_code="und"  # undetermined, if the language code is empty
                fi
                
                # Check if the language code has been used before
                if [[ -n "${language_code_usage[$language_code]}" ]]; then
                    language_code_count=${language_code_usage[$language_code]}
                    ((language_code_count++))
                    language_code_usage[$language_code]=$language_code_count
                    language_code="${language_code}${language_code_count}"
                else
                    language_code_usage[$language_code]=1
                fi
                
                if [[ $title == *"(Forced)"* || $disposition == "1" ]]; then
                    suffix=".forced"
                else
                    suffix=""
                fi
                
                output_file_srt="${output_file%.*}.$language_code$suffix.srt"

                subtitle_cmd+=" -map 0:$index -c copy \"$output_file_srt\" "

            fi
        done
    fi
elif [[ $subtitle_extract == "none" ]]; then
    subtitle_cmd=""
fi

# If not specified, use copy. Store the original user choice.
: ${audio_handling:=copy}
original_audio_handling=$audio_handling

# Function to build the audio command string based on the current audio_handling value
function build_audio_cmd() {
    audio_cmd="" # Reset audio command
    if [[ $audio_handling == "copy" ]]; then
        audio_info=$(ffprobe -v error -select_streams a -show_entries stream=index:stream_tags=language -of csv=p=0 "$input_file")
        mapfile -t audio_streams <<< "$audio_info"
        for i in "${!audio_streams[@]}"; do
            IFS=',' read -r index_audio language_audio <<< "${audio_streams[$i]}"
            audio_cmd+="-map 0:$index_audio -c:a:$i copy "
        done
    elif [[ $audio_handling == "reencode" ]]; then
        audio_info=$(ffprobe -v error -select_streams a -show_entries stream=index:stream_tags=language -of csv=p=0 "$input_file")
        mapfile -t audio_streams <<< "$audio_info"
        unset i
        for i in "${!audio_streams[@]}"; do
            IFS=',' read -r index_audio language_audio <<< "${audio_streams[$i]}"
            
            # Get the number of channels for this specific audio track
            if [[ -n $audio_channels ]]; then
                channels=$audio_channels
            else
                channels=$(ffprobe -v error -select_streams a:$i -show_entries stream=channels -of csv=p=0 "$input_file")
            fi
            
            # Remove white spaces from the language_audio
            language_audio=${language_audio// /}

            # Verify if the language_audio is empty, if not set it to undetermined
            if [[ -z $language_audio ]]; then
                language_audio="und"
            fi

            if [[ -z $audio_bitrate ]]; then
                audio_bitrate_value=$((channels * 32))k
            else
                audio_bitrate_value=$audio_bitrate
            fi

            audio_cmd+="-map 0:$index_audio -c:a:$i aac -aac_coder fast -profile:a aac_low -b:a:$i $audio_bitrate_value -ac:a:$i $channels "

        done
    elif [[ $audio_handling == "none" ]]; then
        audio_cmd="-an"
    fi
}


# if video_quality is default, remove auto
video_quality=${video_quality/default/}

# If quality is not specified, use medium
: ${video_quality:=medium}

case $video_quality in
    veryhigh)
        cq_value=19
        qp_value=18
        global_quality=18
        cq_value_nvidia=19
        ;;
    high)
        cq_value=24
        qp_value=21
        global_quality=21
        cq_value_nvidia=24
        ;;
    medium)
        cq_value=28
        qp_value=24
        global_quality=24
        cq_value_nvidia=28
        ;;
    low)
        cq_value=31
        qp_value=27
        global_quality=27
        cq_value_nvidia=31
        ;;
    verylow)
        cq_value=34
        qp_value=30
        global_quality=30
        cq_value_nvidia=34
        ;;
    superlow)
        cq_value=38
        qp_value=33
        global_quality=33
        cq_value_nvidia=38
        ;;
esac

if [[ $preset == "default" ]]; then
	unset preset
fi

# If preset is not specified, use medium for GPU and faster for software encoding
if [[ -z $preset ]]; then
    language_audio="und"
    preset=medium
    software_preset=faster
else
    software_preset=$preset
fi

# Convert preset for NVIDIA
case $preset in
    ultrafast) nvidia_preset=1 ;;
    veryfast)  nvidia_preset=2 ;;
    faster)    nvidia_preset=3 ;;
    slow)      nvidia_preset=5 ;;
    veryslow)  nvidia_preset=6 ;;
    *)         nvidia_preset=4 ;; # Default to medium
esac

# Function to build the main encoder command strings
function build_encoder_commands() {
    general_params="-i \"$input_file\" $subtitle_cmd -map 0:v:0 $audio_cmd"
    copy_video="$general_params -c:v copy"

    # Select appropriate encoder command based on the specified video encoder
    case $video_encoder in
        h265)
            encoder_nvenc="$general_params -c:v hevc_nvenc -rc:v constqp -qp $qp_value -b:v 0K -tune:v hq -preset:v p$nvidia_preset -temporal-aq 1 -rc-lookahead 100"
            encoder_vulkan="$general_params -c:v hevc_vulkan -preset $preset -look_ahead_depth 100 -global_quality $global_quality"
            encoder_vaapi="$general_params -c:v hevc_vaapi -preset $preset -look_ahead_depth 100 -global_quality $global_quality"
            encoder_qsv="$general_params -c:v hevc_qsv -preset $preset -look_ahead_depth 100 -low_delay_brc 1 -extbrc 1 -global_quality $global_quality -mbbrc 1 -adaptive_i 1 -adaptive_b 1"
            encoder_software="$general_params -c:v libx265 -preset $software_preset -look_ahead_depth 100 -crf $qp_value"
            ;;
        av1)
            encoder_nvenc="$general_params -c:v av1_nvenc -rc:v constqp -qp $qp_value -b:v 0K -tune:v hq -preset:v p$nvidia_preset -temporal-aq 1 -rc-lookahead 100"
            encoder_vaapi="$general_params -c:v av1_vaapi -preset $preset -look_ahead_depth 100 -global_quality $global_quality"
            encoder_qsv="$general_params -c:v av1_qsv -preset $preset -look_ahead_depth 100 -global_quality $global_quality"
            encoder_software="$general_params -c:v libsvtav1 -crf $cq_value"
            ;;
        vp9)
            encoder_nvenc="$general_params -c:v vp9_nvenc -rc:v constqp -qp $qp_value -b:v 0K -tune:v hq -preset:v p$nvidia_preset -temporal-aq 1 -rc-lookahead 100"
            encoder_vaapi="$general_params -c:v vp9_vaapi -preset $preset -look_ahead_depth 100 -global_quality $global_quality"
            encoder_qsv="$general_params -c:v vp9_qsv -preset $preset -look_ahead_depth 100 -global_quality $global_quality"
            encoder_software="$general_params -c:v libvpx-vp9 -preset $software_preset -look_ahead_depth 100 -crf $cq_value  -speed 1"
            ;;
        *) # Default is h264
            encoder_nvenc="$general_params -c:v h264_nvenc -rc:v vbr -cq $cq_value_nvidia -tune:v hq -preset:v p$nvidia_preset -temporal-aq 1 -rc-lookahead 100"
            encoder_vulkan="$general_params -c:v h264_vulkan -preset $preset -look_ahead_depth 100 -global_quality $global_quality"
            encoder_vaapi="$general_params -c:v h264_vaapi -preset $preset -profile:v high -level:v 4.1 -rc_mode 1 -fps_mode cfr -g 60 -keyint_min 60 -look_ahead_depth 100 -low_delay_brc 1 -extbrc 1 -global_quality $global_quality"
            encoder_qsv="$general_params -c:v h264_qsv -preset $preset -profile:v high -level:v 4.1 -fps_mode cfr -g 48 -keyint_min 48 -look_ahead_depth 100 -low_delay_brc 1 -extbrc 1 -global_quality $global_quality -mbbrc 1 -adaptive_i 1 -adaptive_b 1"
            encoder_software="$general_params -c:v libx264 -preset $software_preset -profile:v high -level:v 4.1 -crf $qp_value -look_ahead_depth 100"
            ;;
    esac
}

# If gpu = auto change gpu to empty
gpu=${gpu/auto/}

# Change to case insensitive
shopt -s nocasematch

# Improved version that uses output_format when available
if [[ -n "$output_format" ]]; then
    # Remove any existing extension
    output_basename="${output_file%.*}"
    # Add the output format extension
    output_file="${output_basename}.${output_format}"
elif [[ ! "$output_file" =~ \.(mp4|avi|mkv|mov|wmv|flv|webm|m4v|mpeg|mpg)$ ]]; then
    # If no format is defined and no recognized extension is present, use mp4
    output_file="$output_file.mp4"
fi


# Back to case sensitive
shopt -u nocasematch

# Generic options for ffmpeg
ffmpeg_generic_options="-movflags +faststart -y \"$output_file\""

if [[ $only_extract_subtitles = 1 ]]; then
    general_params="-i \"$input_file\" $subtitle_cmd"
    echo "Running command: $ffmpeg_executable $general_params"
    eval $ffmpeg_executable $general_params
    exit
fi

# Additional validation for 10-bit content with GPU encoders
if [[ $is_10bit == true && $video_encoder == "h264" ]]; then
    echo "Warning: Converting 10-bit input to H.264. Consider using H.265 for better quality and compatibility."

    # Test GPU encoder compatibility with 10-bit input for H.264
    if [[ "$encoder_format" =~ nvenc|vaapi|qsv ]]; then
        echo "Note: Some GPU encoders may not support 10-bit H.264 encoding optimally."
        echo "If encoding fails, the system will automatically fallback to software encoding."
    fi
fi

# Function to attempt the conversion using the 3-stage fallback (GPU -> Partial -> CPU)
function attempt_conversion() {
    # This function now re-initializes all hardware-specific variables to ensure a clean state
    
    # If gpu empty auto detect
    if [[ -z $gpu ]]; then
        devices=$(lspci)
    else
        devices="VGA $gpu"
    fi

    decoder_vulkan='-init_hw_device vulkan=vk -filter_hw_device vk'
    init_vulkan='-init_hw_device vulkan=vk'
    decoder_cuda='-hwaccel cuda -hwaccel_output_format cuda'
    decoder_vaapi='-hwaccel vaapi -hwaccel_output_format vaapi'
    init_vaapi='-init_hw_device vaapi'
    decoder_qsv='-filter_hw_device qs -hwaccel qsv -hwaccel_output_format qsv'
    init_qsv='-init_hw_device vaapi=va:,driver=iHD,kernel_driver=i915 -init_hw_device qsv=qs@va'

    local scale_filter_name="scale"

    if [[ "$gpu" == *"Vulkan"* || "$gpu" == *"vulkan"* ]]; then
        decoder_format="$decoder_vulkan"
        encoder_format="$encoder_vulkan"
        init_hardware="$init_vulkan"
    elif grep -qiE '(VGA|3d).*nvidia' <<<"$devices"; then
        decoder_format="$decoder_cuda"
        encoder_format="$encoder_nvenc"
        # Initialize a CUDA hw device and set it as the filter device so hwupload_cuda
        # knows where to upload frames to. Name chosen as 'cu'.
        init_hardware='-init_hw_device cuda=cu -filter_hw_device cu'
        scale_filter_name="scale_cuda"
    elif grep -qiE 'VGA.*(\bAMD\b|\bATI\b)' <<<"$devices"; then
        decoder_format="$decoder_vaapi"
        encoder_format="$encoder_vaapi"
        init_hardware="$init_vaapi"
        scale_filter_name="scale_vaapi"
    elif grep -qi 'VGA.*intel' <<<"$devices"; then
        decoder_format="$decoder_qsv"
        encoder_format="$encoder_qsv"
        init_hardware="$init_qsv"
        scale_filter_name="scale_qsv"
    else
        encoder_format=$encoder_software
    fi

    if [[ $force_software = 1 ]]; then
        encoder_format=$encoder_software
    fi

    if [[ $force_copy_video = 1 ]]; then
        encoder_format=$copy_video
    fi
    if [[ -n $force_encoder ]]; then
        encoder_var="encoder_${force_encoder}"
        encoder_format=${!encoder_var}
        init_hardware="${!encoder_var/init/}"
    fi

    if [[ -n $force_decoder ]]; then
        decoder_var="decoder_${force_decoder}"
        decoder_format=${!decoder_var}
        init_hardware="${!decoder_var/init/}"
    fi

    # --- Build the unified video filter chain ---
    local video_filter_chain=""
    local filter_parts=()
    
    # 1. Add 10-bit to 8-bit conversion filter if needed
    if [[ $needs_10bit_to_8bit_conversion == true ]]; then
        if [[ "$encoder_format" == "$encoder_software" ]]; then
            filter_parts+=("format=nv12")
        else
            filter_parts+=("${scale_filter_name}=format=nv12")
        fi
    fi

    # 2. Add user-provided filters (like scaling)
    if [[ -n "$video_filter" ]]; then
        local user_filters=${video_filter/-vf /}
        user_filters=${user_filters/scale=/$scale_filter_name=}
        filter_parts+=("$user_filters")
    fi
    
    # 3. Combine filter parts into a single chain
    if [[ ${#filter_parts[@]} -gt 0 ]]; then
        video_filter_chain="-vf $(IFS=,; echo "${filter_parts[*]}")"
    fi
    
    # --- Execute Conversion Attempts ---

    # Try to encode with the GPU
    if [[ "$encoder_format" != "$encoder_software" && "$gpu_partial" != "1" ]]; then
        echo "Encode mode: Decode GPU, encode GPU"
        echo "Running command: $ffmpeg_executable $init_hardware $options $decoder_format $encoder_format $video_filter_chain $ffmpeg_generic_options"
        eval $ffmpeg_executable $init_hardware $options $decoder_format $encoder_format "$video_filter_chain" $ffmpeg_generic_options
    fi

    # Store the exit code while preserving $? for later checks
    exit_code=$?

    # If encoding not successful, and not exit with 255 (interrupted by user), and not software encoding, try with the second option
    if [[ $exit_code != 0 && $exit_code != 255 && $force_software != 1 && $force_copy_video != 1 || "$gpu_partial" == "1" ]]; then
        echo "Encode mode: Decode Software, Encode GPU"
        
        # For partial GPU, we need to add hwupload at the beginning of the filter chain
        # Choose the correct upload filter depending on the GPU encoder.
        # - NVENC requires hwupload_cuda and prefers NV12 pixel format.
        # - VAAPI/Vulkan should derive the device so hwupload can find it.
        # - QSV can use hwupload_qsv.
        local partial_filter_parts=()
        if [[ ${encoder_format,,} =~ nvenc ]]; then
            partial_filter_parts+=("format=nv12" "hwupload_cuda")
        elif [[ ${encoder_format,,} =~ vulkan ]]; then
            partial_filter_parts+=("format=nv12" "hwupload=derive_device=vulkan")
        elif [[ ${encoder_format,,} =~ vaapi ]]; then
            # Ensure the hw device created by init_hardware is used by deriving it here
            partial_filter_parts+=("format=nv12" "hwupload=derive_device=vaapi")
        elif [[ ${encoder_format,,} =~ qsv ]]; then
            partial_filter_parts+=("format=nv12" "hwupload_qsv")
        else
            # Fallback to generic hwupload (may require init_hardware or -vaapi_device elsewhere)
            partial_filter_parts+=("hwupload")
        fi

        # Append existing filter parts after the upload so GPU-only filters run on GPU surfaces.
        if [[ ${#filter_parts[@]} -gt 0 ]]; then
            # Sanitize filter parts: ensure any explicit format conversions target nv12
            # (GPU encoders typically expect nv12) and avoid placing a format=... after hwupload.
            sanitized_parts=()
            for part in "${filter_parts[@]}"; do
                # If part contains 'format=', replace its value with 'nv12'
                if [[ $part == *"format="* ]]; then
                    sanitized_parts+=("${part%%format=*}format=nv12")
                else
                    sanitized_parts+=("$part")
                fi
            done
            partial_filter_parts+=("${sanitized_parts[@]}")
        fi

        # For Vulkan specifically, derive_device should point to the device name created by init_vulkan (vk)
        # If any hwupload derive mentions 'vulkan' replace it with the actual device name 'vk'.
        for i in "${!partial_filter_parts[@]}"; do
            partial_filter_parts[$i]=$(sed -E 's/derive_device=vulkan/derive_device=vk/g' <<<"${partial_filter_parts[$i]}")
        done

        local partial_filter_chain="-vf $(IFS=,; echo "${partial_filter_parts[*]}")"

        echo "Running command: $ffmpeg_executable $init_hardware $options $encoder_format $partial_filter_chain $ffmpeg_generic_options"
        eval $ffmpeg_executable $init_hardware $options $encoder_format "$partial_filter_chain" $ffmpeg_generic_options
        exit_code=$?
    fi

    # If encoding not successful, and not exit with 255 (interrupted by user), try with software
    if [[ $exit_code != 0 && $exit_code != 255 && $force_software != 1 && $force_copy_video != 1 || "$encoder_format" == "$encoder_software" ]]; then
        echo "Encode mode: Decode Software, Encode Software"
        # Software mode uses the original video_filter variable without hw acceleration
        echo "Running command: $ffmpeg_executable $options $encoder_software $video_filter $ffmpeg_generic_options"
        eval $ffmpeg_executable $options $encoder_software "$video_filter" $ffmpeg_generic_options
        exit_code=$?
    fi
}

# --- First Pass ---
# Build commands with initial user settings and attempt conversion.
build_audio_cmd
build_encoder_commands
attempt_conversion

# --- Audio Fallback Pass ---
# If the first pass failed and we were trying to copy audio, it's likely due to an
# incompatible audio codec for the container. Let's try again by re-encoding the audio.
if [[ $exit_code != 0 && $exit_code != 255 && "$original_audio_handling" == "copy" ]]; then
    echo -e "${COLOR_YELLOW}Audio stream copy may have failed. Retrying with audio re-encoding...${COLOR_RESET}"
    
    # Force re-encode and rebuild all commands
    audio_handling="reencode"
    build_audio_cmd
    build_encoder_commands
    
    # Attempt the conversion again with the new settings
    attempt_conversion
fi


# --- Final Exit Code Check ---
if [[ $exit_code != 0 ]]; then
    if [[ $exit_code == 255 ]]; then
        echo -e "${COLOR_YELLOW}Conversion interrupted by user.${COLOR_RESET}"
    else
        echo -e "${COLOR_YELLOW}Conversion failed with an unexpected error. Exit code: $exit_code.${COLOR_RESET}"
    fi
    exit $exit_code
fi
